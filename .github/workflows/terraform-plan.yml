name: "Terraform Plan"

on:
  pull_request:

# if: $GITHUB_BASE_REF == "PRO"
# if: ${{ github.base_ref == 'refs/heads/PRO' }}
env:
  PROD_TF_CLOUD_ORGANIZATION: "linvest21-Terraform-Automation"
  PROD_TF_API_TOKEN: "${{ secrets.TF_TOKEN }}"
  PROD_TF_WORKSPACE: "terraform-pro"
  PROD_CONFIG_DIRECTORY: "./"

  DEV_TF_CLOUD_ORGANIZATION: "linvest21-Terraform-Automation-dev"
  DEV_TF_API_TOKEN: "${{ secrets.TF_TOKEN }}"
  DEV_TF_WORKSPACE: "terraform-dev"
  DEV_CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    # if: github.repository != 'hashicorp-education/learn-terraform-github-actions'
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get branch name
        run: echo 'The branch name is' $GITHUB_BASE_REF

      - name: Upload DEV Configuration
        if: ${{ github.base.ref }} == 'dev'

        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.DEV_TF_WORKSPACE }}
          directory: ${{ env.DEV_CONFIG_DIRECTORY }}
          speculative: true
        # if: ${{ github.base.ref }} == 'dev'

      - name: Upload PRO Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-prod-upload
        with:
          workspace: ${{ env.PROD_TF_WORKSPACE }}
          directory: ${{ env.PROD_CONFIG_DIRECTORY }}
          speculative: true
        if: ${{ github.base.ref }} == 'PRO'

      # - name: Create Plan Run
      #   uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      #   id: plan-run
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
      #     plan_only: true

      # - name: Get Plan Output
      #   uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
      #   id: plan-output
      #   with:
      #     plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      # - name: Update PR
      #   uses: actions/github-script@v6
      #   id: plan-comment
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       });
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
      #       });
      #       const output = `#### Terraform Cloud Plan Output
      #          \`\`\`
      #          Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
      #          \`\`\`
      #          [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
      #          `;
      #       // 3. Delete previous comment so PR timeline makes sense
      #       if (botComment) {
      #         github.rest.issues.deleteComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #         });
      #       }
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       });
